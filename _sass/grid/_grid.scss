/**
 * 12 Column Flex Grid
 *
 * Simple 12 column grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Break point namespace object
 *
 * $bp-namespace-obj is a Sass list with nested lists inside. Each sub list defines two things.
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 */
$bp-namespace-obj: ( (xs), (sm, 48em), (md, 62em), (lg, 75em) ) !default;


/**
 * Column Maths
 */

$half-gutter: 0.5rem;
$half-gutter-adjustment: -$half-gutter;

/**
 * Function for fetching column percentage because I don't trust browser rounding.
 *
 * Really wish Sass had a notion of a switch statement, but this will have to do for now...
 */
@function get-col-percent($column-num) {
	@if $column-num == 1  { @return  8.333333333%; }
	@else if $column-num == 2  { @return 16.666666667%; }
	@else if $column-num == 3  { @return 25%; }
	@else if $column-num == 4  { @return 33.333333333%;	}
	@else if $column-num == 5  { @return 41.666666667%;	}
	@else if $column-num == 6  { @return 50%;	}
	@else if $column-num == 7  { @return 58.333333333%;	}
	@else if $column-num == 8  { @return 66.666666667%;	}
	@else if $column-num == 9  { @return 75%;	}
	@else if $column-num == 10 { @return 83.333333333%;	}
	@else if $column-num == 11 { @return 91.666666667%;	}
	@else if $column-num == 12 { @return 100%;	}
	@else { @return 8.333333333%;	}
}


/**
 * Row wrapper class, flex box parent.
 */
.row {
	box-sizing: border-box;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	margin-right: $half-gutter-adjustment;
	margin-left: $half-gutter-adjustment;
}

.container {
  margin: 0 auto;
	max-width: 800px;
	padding-left: 15px;
	padding-right: 15px;
}

@mixin col {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  padding-right: $half-gutter;
  padding-left: $half-gutter;
}

@mixin col-flex {
	@include col;
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}


/**
 * Generate a set of grid column classes using a namespace
 *
 * .col-[namespace] for intelligent column division
 * .col-[namespace]-[number] for a column that covers a specific number of columns (1-12)
 * .off-[namespace]-[number] for pushing a col a specific number of columns (1-11)
 */
@mixin grid($namespace) {

	.col-#{$namespace} {
		@include col-flex;
	}

	@for $i from 1 through 12 {
		.col-#{$namespace}-#{$i} {
			@include col;
			flex-basis: get-col-percent($i);
			max-width:  get-col-percent($i);
		}
	}

	@for $i from 1 through 11 {
		.off-#{$namespace}-#{$i} {
			margin-left: get-col-percent($i);
		}
	}

}


/**
 * Generate the actual grid for each namespace in the $bp-namespace-obj.
 */
@each $val in $bp-namespace-obj {

	@if length($val) == 1 {

		$namespace: nth($val, 1);
		@include grid($namespace);

	} @else {

		$namespace: nth($val, 1);
		$size: nth($val, 2);

		@media only screen and (min-width: #{$size}) {
			@include grid($namespace);
		}

	}

}
