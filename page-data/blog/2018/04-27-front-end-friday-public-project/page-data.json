{"componentChunkName":"component---src-templates-post-js","path":"/blog/2018/04-27-front-end-friday-public-project/","webpackCompilationHash":"6dffd38fa420acc43139","result":{"data":{"markdownRemark":{"html":"<p><em>(Note: this isn't a tutorial...)</em></p>\n<p>After getting some decent feedback about my <a href=\"https://sceendy.com/blog/2018/01-17-new-project-atx-pet-finder/\">Pet Finder project</a> from friends, I decided to launch it as its own stand alone web app instead of hosting it on my personal site. </p>\n<p>Along with that decision, I also decided to do other things such as redesigning it, rebuilding it, including continous integration/deployment, and hosting it with a separate domain.</p>\n<h4>redesign</h4>\n<p>While I was content with the initial design, I did want to try to come up with some branding and build a custom component library for the app. </p>\n<p>I used Sketch to design reusable components for the app and from there started putting them together on a page for both mobile and desktop. I didn't need to have everything all designed out -- just enough components to start building. I got the idea of using pink and purple as the colors when I saw a <a href=\"https://dribbble.com/shots/4421099-Wake-joins-InVision-Introducing-Wake-Free\">shot on dribbble by InvisionApp</a>. </p>\n<p>The filter was moved above the pet list and map to look a little more like a control for the page. Also, instead of pagination, the map would now stick to the page as you scroll through the entire pet list. This seems like a more appropriate UX since people were filtering narrowly and scrolling just felt much more natural.</p>\n<h4>rebuilding</h4>\n<p>Since I figured out the logic in the initial build, I decided to use the redesign as an opportunity to rebuild it using a library I hadn't really used. The project was initially built using Angular which is great but totally overkill for a tiny single view app. I chose to use React as I had been wanting to try it for a while and provided the things I wanted in a small library over a framework.</p>\n<p>I kept everything straight forward and simple by using Webpack, PostCSS, React/Redux, and Jest/Enzyme for testing. </p>\n<h4>continuous CI/CD</h4>\n<p>With the app being public, I knew I'd want to automate the process of building, testing, and deploying the code. I chose to use <a href=\"https://circleci.com/\">CircleCI</a> for CI since I found the dashboard quite simple to use. I used git for version control and am hosting that code on Github using <a href=\"https://github.com/tschaub/gh-pages\">GH-Pages</a> so all I had to do was add the project on my CircleCI dashboard. Then, I simply added a file to my repo to complete the integration.</p>\n<p>Once I had a successful build, I created a new heroku project to host it and deployed it from there.</p>\n<p><a href=\"https://www.atxpawfinder.com/\">ATX Paw Finder</a></p>","frontmatter":{"title":"Front-end Friday: Launching a small app","date":"April 27, 2018","tags":["dev","front-end friday"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"blog/2018/04-27-front-end-friday-public-project/","date":"2018-04-27T08:00:00.000Z"}}}